/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    TreeNode* ConstructBinaryTree(int i,int j,vector<int>&arr){
        // base
        if(i>j) return NULL;
        // calculating the mid value
        int ind=(i+j)>>1;
        int Nodeval=arr[ind];
        TreeNode* Node=new TreeNode(Nodeval);
        Node->left=ConstructBinaryTree(i,ind-1,arr);
        Node->right=ConstructBinaryTree(ind+1,j,arr);
         return Node;
    }
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return ConstructBinaryTree(0,nums.size()-1,nums);
    }
};

Time Complexity is O(N) & Space COmplexity is O(h) where h is height of a tree & N is The length of array
