This problem can aslo be Solve using Dynamic programming, Memoization, tabulation & Space Optimization.last one is Recursion!!
But Time Complexity is stil O(n^2) & space coplexity is still O(n^2)

So, Therefore there is a better approach Here. Bianry search approach
i. Lower bound, In which time Comlexity is O(nlogn) & space copmlexity is O(n), where n is the number of element in the array i.e size of the array


Code is here:-

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
     vector<int> temp;
     temp.push_back(nums[0]);
    int siz=1;
    
    for(int i=1;i<nums.size();i++)
    {  
        if(nums[i]>temp.back())
        {
            temp.push_back(nums[i]);
            siz++;
        }
        else{ 
            int inx=lower_bound(temp.begin(),temp.end(),nums[i])-temp.begin(); 
            temp[inx]=nums[i];   
        }   
    }
        for(int i:temp){
            cout<<i<<" ";
        }
    return siz;
    }
};
