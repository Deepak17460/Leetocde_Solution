/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool Helper(TreeNode*root,long Minval,long Maxval){
        // base case
        if(root==NULL) return true;
        if(root->val>=Maxval||root->val<=Minval) return false;
        return Helper(root->left,Minval,root->val) && Helper(root->right,root->val,Maxval);
    }
public:
    bool isValidBST(TreeNode* root) {
        return Helper(root,LONG_MIN,LONG_MAX);
    }
};

Time Complexity is O(N) & space Copmplexity is O(Height of tree) i.e O(logn) where n is the number of the nodes
